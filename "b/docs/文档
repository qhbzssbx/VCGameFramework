# VContainer 游戏框架使用说明

本文档简要介绍项目中依赖注入框架的使用方式。

## 作用域层级
1. **ProjectContext**：全局唯一，在游戏启动时创建，适合注册单例服务，如网络、账户、背包数据等。
2. **SceneLifetimeScope**：与场景绑定，每个场景根对象挂载 `LifetimeScope` 组件，用于管理场景级逻辑。
3. **GameObjectLifetimeScope**：动态实例化的预制体可挂载 `LifetimeScope`，适合封装 UI 窗口或复杂实体。

## 添加全局服务
在 `ProjectModule` 中通过 `builder.Register` 注册。示例：
```csharp
builder.Register<IMasterDataService, MasterDataService>(Lifetime.Singleton);
```

## 创建场景作用域
在场景根对象上添加 `LifetimeScope`，并继承 `LifetimeScope` 编写配置类：
```csharp
public class MainCityLifetimeScope : LifetimeScope
{
    protected override void Configure(IContainerBuilder builder)
    {
        builder.RegisterEntryPoint<ChatManager>(Lifetime.Scoped);
    }
}
```

## 创建动态窗口
1. 在预制体根节点挂载 `LifetimeScope`。
2. 编写 `XXWindowLifetimeScope` 类注册视图与 Presenter。
3. 通过 `UIManager` 或其他方式实例化该预制体即可获得独立的依赖环境。

